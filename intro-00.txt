I worked a lot on JUCE this past summer. It is a c++ based library that deals mostly with audio applications. I was using it to write a drum machine plugin and the process has been very time-consuming. I was able to make things work most of the time but the complexity of the program architecture and c++ itself has made it harder than any language that i’ve ever written. JUCE comprises a lot of built-in classes, methods, and intricate dependencies/inheritances among them. Programmers don’t really have full autonomy over what they write. Almost every conventional functionality of an audio application can be found implemented somewhere in the library, which is convenient but troublesome at the same time. Since you always have to think along lines planned out by someone else, regardless of it being confusing or not. JUCE has a huge documentation page and forum dedicated to programmers looking for answers, There is also a community and even conferences discussing creative solutions related to it. Lots of startup companies use this program because of it saves the trouble of building everything from scratch, and that fancy customization is possible. However for a beginner in c++, it only starts to be easier to query (know what to look for) after some degree of familiarization with the program. 
JUCE has a new version to download almost every week, which makes writing code a bit unstable. Things that work yesterday might be deprecated in the new version, and you will have to replace the method, delete the method, or choose to not upgrade at all. While working in the summer, I had to transfer JUCE files back and forth with my teammate (we learned to act smarter and use GitHub later on), compilation errors that are inconsistent across different people’s laptop often appear. At this point I don’t remember what those errors were and how we resolved it, but we ended up sharing only the uncompiled source code for scalability. 
Furthermore, JUCE has a very easy-to-use platform for setting the output format. All formats of plugin, standalone applications can be compiled and distributed across different OS systems. 
Overall, I think JUCE is an okay program that sets too much rules over how people should write code, and where to put things. It’s working well. But for some of the more customized functionalities, one needs to hack one’s way through the layers of inheritances to make it work. This progress can be really frustrating. 